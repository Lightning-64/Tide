plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}

repositories {
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = 'BlameJared'
        url = "https://maven.blamejared.com"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}")
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")

    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modApi("me.shedaniel.cloth:cloth-config-fabric:15.0.130") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

fabricApi {
    configureDataGeneration()
}

loom {
    def aw = project(':fabric').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) accessWidenerPath.set(aw)

    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
        data {
            inherit client
            setConfigName("Fabric Data")
            ideConfigGenerated(true)
            runDir("build/datagen")

            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${project(":common").file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
        }
    }
}

sourceSets.main.resources {
    srcDir project(':common').file('src/generated/resources').getAbsolutePath()
}